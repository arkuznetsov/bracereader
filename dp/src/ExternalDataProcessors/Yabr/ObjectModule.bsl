Перем ПараметрыОбработкиДанных;

Функция ПараметрыОбработкиДанных() Экспорт
	
	Возврат ПараметрыОбработкиДанных;
	
КонецФункции // ПараметрыОбработкиДанных()

Процедура УстановитьПараметрыОбработкиДанных(Знач ПараметрыОбработки) Экспорт
	
	ПроверитьДопустимостьТипа(ПараметрыОбработки,
	                          "Строка, Файл, ДвоичныеДанные, Структура",
	                          СтрШаблон("Некорректно указаны параметры обработки данных ""%1"",", СокрЛП(ПараметрыОбработки)) +
							  ", тип ""%1"", ожидается тип %2!");
							  
	Если ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		ПараметрыОбработкиДанных = ПараметрыОбработки;
	Иначе
		ПараметрыОбработкиДанных = ПрочитатьПараметрыОбработкиДанных(ПараметрыОбработки);
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыОбработкиДанных()

Функция ПрочитатьПараметрыОбработкиДанных(Знач ПараметрыОбработки) Экспорт
	
	ПроверитьДопустимостьТипа(ПараметрыОбработки,
	                          "Строка, Файл, ДвоичныеДанные",
	                          СтрШаблон("Некорректно указаны настройки ""%1"",", СокрЛП(ПараметрыОбработки)) +
							  ", тип ""%1"", ожидается тип %2!");
							  
	ЧтениеПараметров = Новый ЧтениеJSON();
	
	Если ТипЗнч(ПараметрыОбработки) = Тип("Строка") Тогда
		Если Лев(СокрЛП(ПараметрыОбработки), 1) = "{" Тогда
			ЧтениеПараметров.УстановитьСтроку(ПараметрыОбработки);
		Иначе
			ЧтениеПараметров.ОткрытьФайл(ПараметрыОбработки);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрыОбработки) = Тип("ДвоичныеДанные") Тогда
		ЧтениеПараметров.ОткрытьПоток(ПараметрыОбработки.ОткрытьПотокДляЧтения());
	ИначеЕсли ТипЗнч(ПараметрыОбработки) = Тип("Файл") Тогда
		ЧтениеПараметров.ОткрытьФайл(ПараметрыОбработки);
	КонецЕсли;
	
	Возврат ПрочитатьJSON(ЧтениеПараметров, Ложь, , ФорматДатыJSON.ISO, "ОбработчикЧтенияПараметровИзJSON", ЭтотОбъект);
	
КонецФункции // ПрочитатьПараметрыОбработкиДанных()

Процедура ОбработатьДанные(Знач Данные = Неопределено, Знач ПараметрыОбработки = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		ПараметрыОбработки = ПараметрыОбработкиДанных;
	КонецЕсли;
	
	ПроверитьСвойства(ПараметрыОбработки, "ИмяОбработки", "Отсутствуют обязательные настройки: %1");
	
	Если НЕ ПараметрыОбработки.Свойство("Обработка") Тогда
		ПараметрыОбработки.Вставить("Обработка", ВнешниеОбработки.Создать(ПараметрыОбработки.ИмяОбработки, Ложь));
		ПараметрыОбработки.Обработка.УстановитьВладельца(ЭтотОбъект);
		УстановитьПараметрыОбработчика(ПараметрыОбработки);
	КонецЕсли;
	//Если НЕ ТипЗнч(ПараметрыОбработки.Обработка) = Тип(СтрШаблон("ВнешняяОбработкаОбъект.%1", ПараметрыОбработки.ИмяОбработки)) Тогда
	//	ПараметрыОбработки.Обработка = ВнешниеОбработки.Создать(ПараметрыОбработки.ИмяОбработки, Ложь);
	//	ПараметрыОбработки.Обработка.УстановитьВладельца(ЭтотОбъект);
	//	УстановитьПараметрыОбработчика(ПараметрыОбработки);
	//КонецЕсли;
		
	Если ПараметрыОбработки.Свойство("ПроцедураОбработки") Тогда
		Выполнить("ПараметрыОбработки.Обработка." + ПараметрыОбработки.ПроцедураОбработки + "()");
	Иначе
		ПараметрыОбработки.Обработка.ОбработатьДанные();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьДанные()

Процедура ПродолжениеОбработкиДанных(Знач Данные, Знач ПараметрыОбработки) Экспорт
	
	Если НЕ ПараметрыОбработки.Свойство("Обработчики") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ПараметрыОбработки.Обработчики) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекОбработчик Из ПараметрыОбработки.Обработчики Цикл
		ОбработатьДанные(Данные, ТекОбработчик);
	КонецЦикла;
	
КонецПроцедуры // ПродолжениеОбработкиДанных()

Процедура ЗавершениеОбработкиДанных(Знач ПараметрыОбработки) Экспорт
	
	Если НЕ ПараметрыОбработки.Свойство("Обработчики") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ПараметрыОбработки.Обработчики) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекОбработчик Из ПараметрыОбработки.Обработчики Цикл
		ТекОбработчик.Обработка.ЗавершениеОбработкиДанных();
	КонецЦикла;
	
КонецПроцедуры // ЗавершениеОбработкиДанных()

Процедура УстановитьПараметрыОбработчика(Знач ПараметрыОбработки)
	
	Если ПараметрыОбработки.Свойство("Параметры") Тогда
		Для Каждого ТекПараметр Из ПараметрыОбработки.Параметры Цикл
			Если НЕ ТипЗнч(ТекПараметр.Значение) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ (ТекПараметр.Значение.Свойство("ИмяОбработки") И ТекПараметр.Значение.Свойство("ФункцияПолученияЗначения")) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекПараметр.Значение = ВычислитьЗначениеПараметра(ТекПараметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОбработки.Обработка.УстановитьПараметры(ПараметрыОбработки);
	
КонецПроцедуры // УстановитьПараметрыОбработчика()

Функция ВычислитьЗначениеПараметра(СтруктураПараметра)
	
	Если НЕ СтруктураПараметра.Свойство("Обработка") Тогда
		СтруктураПараметра.Вставить("Обработка", ВнешниеОбработки.Создать(СтруктураПараметра.ИмяОбработки, Ложь));
	КонецЕсли;
	Если НЕ ТипЗнч(СтруктураПараметра.Обработка) = Тип(СтрШаблон("ВнешняяОбработкаОбъект.%1", СтруктураПараметра.ИмяОбработки)) Тогда
		СтруктураПараметра.Обработка = СтруктураПараметра.Создать(СтруктураПараметра.ИмяОбработки, Ложь);
	КонецЕсли;
	
	УстановитьПараметрыОбработчика(СтруктураПараметра);
	
	ЗначениеПараметра = Неопределено;
	
	Выполнить("ЗначениеПараметра = СтруктураПараметра.Обработка." + СтруктураПараметра.ФункцияПолученияЗначения + "()");
	
	Возврат ЗначениеПараметра;
	
КонецФункции // ВычислитьЗначениеПараметра()

// Функция - проверяет тип значения на соответствие допустимым типам
//
// Параметры:
//  Значение             - Произвольный                 - проверяемое значение
//  ДопустимыеТипы       - Строка, Массив(Строка, Тип)  - список допустимых типов
//  ШаблонТекстаОшибки   - Строка                       - шаблон строки сообщения об ошибке
//                                                        ("Некорректный тип значения ""%1"" ожидается тип %2")
// 
// Возвращаемое значение:
//	Булево       - Истина - проверка прошла успешно
//
Функция ПроверитьДопустимостьТипа(Знач Значение, Знач ДопустимыеТипы, Знач ШаблонТекстаОшибки = "")
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗнч(ДопустимыеТипы) = Тип("Строка") Тогда
		МассивДопустимыхТипов = СтрРазделить(ДопустимыеТипы, ",");
	ИначеЕсли ТипЗнч(ДопустимыеТипы) = Тип("Массив") Тогда
		МассивДопустимыхТипов = ДопустимыеТипы;
	Иначе
		ВызватьИсключение СтрШаблон("Некорректно указан список допустимых типов, тип ""%1"" ожидается тип %2!",
		                            Тип(ДопустимыеТипы),
									"""Строка"" или ""Массив""");
	КонецЕсли;
	
	Типы = Новый Соответствие();
	
	СтрокаДопустимыхТипов = "";
	
	Для Каждого ТекТип Из МассивДопустимыхТипов Цикл
		ВремТип = ?(ТипЗнч(ТекТип) = Тип("Строка"), Тип(СокрЛП(ТекТип)), ТекТип);
		Типы.Вставить(ВремТип, СокрЛП(ТекТип));
		СтрокаДопустимыхТипов = СтрокаДопустимыхТипов
		                      + ?(СтрокаДопустимыхТипов = "",
							      "",
							      ?(МассивДопустимыхТипов.Найти(ТекТип) = МассивДопустимыхТипов.ВГраница(),
								    " или ",
								    ", "))
		                      + """" + СокрЛП(ТекТип) + """";
	КонецЦикла;
	
	Если ШаблонТекстаОшибки = "" Тогда
		ШаблонТекстаОшибки = "Некорректный тип значения ""%1"" ожидается тип %2!";
	КонецЕсли;
	
	Если Типы[ТипЗначения] = Неопределено Тогда
		ВызватьИсключение СтрШаблон(ШаблонТекстаОшибки, СокрЛП(ТипЗначения), СтрокаДопустимыхТипов);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьДопустимостьТипа()

// Функция - Проверить свойства
//
// Параметры:
//  ПроверяемаяСтруктура     - Структура               - проверяемая структура
//  ОбязательныеСвойства     - Строка, Массив(Строка)  - список обязательных свойств
//  ШаблонТекстаОшибки       - Строка                  - шаблон строки сообщения об ошибке
//                                                       ("Отсутствуют обязательные свойства: %1")
// 
// Возвращаемое значение:
//	Булево       - Истина - проверка прошла успешно
//
Функция ПроверитьСвойства(Знач ПроверяемаяСтруктура, Знач ОбязательныеСвойства, Знач ШаблонТекстаОшибки = "")
	
	ПроверитьДопустимостьТипа(ОбязательныеСвойства,
	                          "Строка, Массив",
	                          "Некорректно указан список обязательных свойств, тип ""%1"", ожидается тип %2!");
							  
	Если ТипЗнч(ОбязательныеСвойства) = Тип("Строка") Тогда
		МассивСвойств = СтрРазделить(ОбязательныеСвойства, ",");
	ИначеЕсли ТипЗнч(ОбязательныеСвойства) = Тип("Массив") Тогда
		МассивСвойств = ОбязательныеСвойства;
	КонецЕсли;
	
	СтрокаСвойств = "";
	
	Для Каждого ТекСвойство Из МассивСвойств Цикл
		
		Если ПроверяемаяСтруктура.Свойство(СокрЛП(ТекСвойство)) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСвойств = СтрокаСвойств
		                      + ?(СтрокаСвойств = "", Символы.ПС, ", " + Символы.ПС)
		                      + """" + СокрЛП(ТекСвойство) + """";
	КонецЦикла;
						  
	Если ШаблонТекстаОшибки = "" Тогда
		ШаблонТекстаОшибки = "Отсутствуют обязательные свойства: %1";
	КонецЕсли;
	
	Если НЕ СтрокаСвойств = "" Тогда
		ВызватьИсключение СтрШаблон(ШаблонТекстаОшибки, СтрокаСвойств);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьСвойства()

Функция ОбработчикЧтенияПараметровИзJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Значение = СтрЗаменить(Значение, "$thisRoot\", КаталогТекущейОбработки());
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // ОбработчикЧтенияПараметровИзJSON()

// Функция - возвращает путь к каталогу текущей обработки
// 
// Возвращаемое значение:
//	Строка       - путь к каталогу текущей обработки
//
Функция КаталогТекущейОбработки() Экспорт
	
	ФайлЭтойОбработки = Новый Файл(ЭтотОбъект.ИспользуемоеИмяФайла);
	
	Возврат ФайлЭтойОбработки.Путь;
	
КонецФункции // КаталогТекущейОбработки()

// Функция - Определяет каталог файла
//
// Параметры:
//  ПутьКФайлу	 - Строка - путь к проверяемому файлу
// 
// Возвращаемое значение:
//   Строка - каталог файла
//
Функция КаталогФайла(ПутьКФайлу)
	
	ВремФайл = Новый Файл(ПутьКФайлу);
	
	Возврат Сред(ВремФайл.Путь, 1, СтрДлина(ВремФайл.Путь) - 1);
	
КонецФункции // КаталогФайла()

