Перем МенеджерОбработкиДанных;
Перем ПараметрыОбработки;
Перем Данные;

#Область ПрограммныйИнтерфейс

// Функция - Возвращает обработку - менеджер
// 
// Возвращаемое значение:
//	ВнешняяОбработкаОбъект - обработка-менеджер
//
Функция МенеджерОбработкиДанных() Экспорт
	
	Возврат МенеджерОбработкиДанных;
	
КонецФункции // МенеджерОбработкиДанных()

// Процедура - Устанавливает обработку - менеджер
//
// Параметры:
//	НовыйМенеджерОбработкиДанных      - ВнешняяОбработкаОбъект - обработка-менеджер
//
Процедура УстановитьМенеджерОбработкиДанных(Знач НовыйМенеджерОбработкиДанных) Экспорт
	
	МенеджерОбработкиДанных = НовыйМенеджерОбработкиДанных;
	
КонецПроцедуры // УстановитьМенеджерОбработкиДанных()

// Функция - Возвращает значения параметров обработки данных
// 
// Возвращаемое значение:
//	Структура - параметры обработки данных
//
Функция ПараметрыОбработкиДанных() Экспорт
	
	Возврат ПараметрыОбработки;
	
КонецФункции // ПараметрыОбработкиДанных()

// Процедура - Устанавливает значения параметров обработки
//
// Параметры:
//	НовыеПараметры      - Структура     - значения параметров обработки
//
Процедура УстановитьПараметрыОбработкиДанных(Знач НовыеПараметры) Экспорт
	
	ПараметрыОбработки = НовыеПараметры;
	
КонецПроцедуры // УстановитьПараметрыОбработкиДанных()

// Процедура - устанавливает данные для обработки
//
// Параметры:
//	Данные      - Структура     - значения параметров обработки
//
Процедура УстановитьДанные(Знач ВходящиеДанные) Экспорт
	
	Данные = ВходящиеДанные;
	
КонецПроцедуры // УстановитьДанные()

// Функция - возвращает текущие результаты обработки
//
// Возвращаемое значение:
//	Произвольный     - результаты обработки данных
//
Функция РезультатыОбработки() Экспорт
	
	Возврат Неопределено;
	
КонецФункции // РезультатыОбработки()

// Процедура - выполняет обработку данных
//
Процедура ОбработатьДанные() Экспорт
	
	ЗначениеДляВывода = "";
	
	Если ТипЗнч(Данные) = Тип("Массив")
	 ИЛИ ТипЗнч(Данные) = Тип("ФиксированныйМассив")
	 ИЛИ ТипЗнч(Данные) = Тип("Структура")
	 ИЛИ ТипЗнч(Данные) = Тип("ФиксированнаяСтруктура")
	 ИЛИ ТипЗнч(Данные) = Тип("Соответствие")
	 ИЛИ ТипЗнч(Данные) = Тип("ФиксированноеСоответствие") Тогда
	
		ЗначениеДляВывода = ПолучитьЗначениеJSON(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
		
		ЗначениеДляВывода = Данные;
		
	Иначе
		
		ЗначениеДляВывода = СокрЛП(Данные);
		
	КонецЕсли;
	
	СообщитьПользователю(ЗначениеДляВывода);
	
	МенеджерОбработкиДанных.ПродолжениеОбработкиДанных(ЗначениеДляВывода, ПараметрыОбработки);
	
КонецПроцедуры // ОбработатьДанные()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает обработку-менеджер о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанных() Экспорт
	
	Если НЕ МенеджерОбработкиДанных = Неопределено Тогда
		Попытка
			МенеджерОбработкиДанных.ЗавершениеОбработкиДанных(ПараметрыОбработки);
		Исключение
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ЗавершениеОбработкиДанных()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - возвращает значение, преобразованное к строке в формате JSON
//
// Параметры:
//	Значение         - Произвольный            - произвольный тип, совместимый с форматом JSON
//
// Возвращаемое значение:
//	Строка           - преобразванное значение, строка в формате JSON
//
Функция ПолучитьЗначениеJSON(Знач Значение) Экспорт
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, Символы.Таб));
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ВариантЗаписиДаты      = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	Попытка
		ЗаписатьJSON(Запись, Значение, НастройкиСериализации);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат Запись.Закрыть();
	
КонецФункции // ПолучитьЗначениеJSON()

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                - Любая ссылка на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы)
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "") Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	Сообщение.КлючДанных = КлючДанных;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) И КлючДанных = Неопределено Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
КонецПроцедуры // СообщитьПользователю()

#КонецОбласти
