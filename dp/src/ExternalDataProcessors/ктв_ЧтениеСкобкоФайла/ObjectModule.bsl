//----------------------------------------------------------
//This Source Code Form is subject to the terms of the
//Mozilla Public License, v.2.0. If a copy of the MPL
//was not distributed with this file, You can obtain one
//at http://mozilla.org/MPL/2.0/.
//----------------------------------------------------------
//Codebase: https://github.com/ArKuznetsov/yabr/
//----------------------------------------------------------

Перем МенеджерОбработкиДанных; // ВнешняяОбработкаОбъект - обработка-менеджер, вызвавшая данный обработчик
Перем Идентификатор;           // Строка                 - идентификатор обработчика, заданный обработкой-менеджером
Перем ПараметрыОбработки;      // Структура              - параметры обработки
Перем ЗапоминатьНомераСтрок;   // Булево                 - Истина - при чтении файла,
                               //                          будут запоминаться номера строк для каждого элемента
Перем ПутьКФайлу;              // Строка                 - путь к файлу для чтения
Перем НачальнаяСтрока;         // Число                  - номер начальной строки файла для чтения
Перем УровниЗаписей;           // Массив(Число)          - номера уровней записей скобкофайла,
                               //                          которые будут переданы на дальнейшую обработку

Перем ЧастотаЗамераСкоростиВыполнения; // Число          - через указанное количество прочитанных строк
                                       //                  будет выполняться замер скорости чтения
Перем ЗамерСкоростиВыполнения;         // Структура      - структура для хранения результатов замера скорости чтения

Перем ПрочитанныеДанные;               // Структура      - прочитанные данные

#Область ПрограммныйИнтерфейс

// Функция - Возвращает обработку - менеджер
// 
// Возвращаемое значение:
//	ВнешняяОбработкаОбъект - обработка-менеджер
//
Функция МенеджерОбработкиДанных() Экспорт
	
	Возврат МенеджерОбработкиДанных;
	
КонецФункции // МенеджерОбработкиДанных()

// Процедура - Устанавливает обработку - менеджер
//
// Параметры:
//	НовыйМенеджерОбработкиДанных      - ВнешняяОбработкаОбъект - обработка-менеджер
//
Процедура УстановитьМенеджерОбработкиДанных(Знач НовыйМенеджерОбработкиДанных) Экспорт
	
	МенеджерОбработкиДанных = НовыйМенеджерОбработкиДанных;
	
КонецПроцедуры // УстановитьМенеджерОбработкиДанных()

// Функция - Возвращает идентификатор обработчика
// 
// Возвращаемое значение:
//	Строка - идентификатор обработчика
//
Функция Идентификатор() Экспорт
	
	Возврат Идентификатор;
	
КонецФункции // Идентификатор()

// Процедура - Устанавливает идентификатор обработчика
//
// Параметры:
//	НовыйИдентификатор      - Строка - новый идентификатор обработчика
//
Процедура УстановитьИдентификатор(Знач НовыйИдентификатор) Экспорт
	
	Идентификатор = НовыйИдентификатор;
	
КонецПроцедуры // УстановитьИдентификатор()

// Функция - Возвращает значения параметров обработки
// 
// Возвращаемое значение:
//	Структура - параметры обработки
//
Функция ПараметрыОбработкиДанных() Экспорт
	
	Возврат ПараметрыОбработки;
	
КонецФункции // ПараметрыОбработкиДанных()

// Процедура - Устанавливает значения параметров обработки данных
//
// Параметры:
//	НовыеПараметры      - Структура     - значения параметров обработки
//
Процедура УстановитьПараметрыОбработкиДанных(Знач НовыеПараметры) Экспорт
	
	ПараметрыОбработки = НовыеПараметры;
	
	Если ПараметрыОбработки.Свойство("ЗапоминатьНомераСтрок") Тогда
		ЗапоминатьНомераСтрок = ПараметрыОбработки.ЗапоминатьНомераСтрок;
	Иначе
		ЗапоминатьНомераСтрок = Ложь;
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("ПутьКФайлу") Тогда
		ПутьКФайлу = ПараметрыОбработки.ПутьКФайлу;
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("УровниЗаписей") Тогда
		УровниЗаписей = ПараметрыОбработки.УровниЗаписей;
	Иначе
		УровниЗаписей = Новый Массив();
		УровниЗаписей.Добавить(1);
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("НачальнаяСтрока") Тогда
		НачальнаяСтрока = ПараметрыОбработки.НачальнаяСтрока;
	Иначе
		НачальнаяСтрока = 1;
	КонецЕсли;
	
	Если ПараметрыОбработки.Свойство("ЧастотаЗамераСкоростиВыполнения") Тогда
		ЧастотаЗамераСкоростиВыполнения = ПараметрыОбработки.ЧастотаЗамераСкоростиВыполнения;
	Иначе
		ЧастотаЗамераСкоростиВыполнения = 0;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыОбработкиДанных()

// Процедура - устанавливает данные для обработки
//
// Параметры:
//	Данные      - Структура     - значения параметров обработки
//
Процедура УстановитьДанные(Знач ВходящиеДанные) Экспорт
	
	Возврат;
	
КонецПроцедуры // УстановитьДанные()

// Функция - возвращает текущие результаты обработки
//
// Возвращаемое значение:
//	Произвольный     - результаты обработки данных
//
Функция РезультатОбработки() Экспорт
	
	Возврат ПрочитанныеДанные;
	
КонецФункции // РезультатОбработки()

// Функция - возвращает результаты последнего замера скорости выполнения обработки
//
// Возвращаемое значение:
//	Структура     - результаты замера скорости выполнения обработки данных
//
Функция ЗамерСкоростиВыполнения() Экспорт
	
	ТекЗамерСкоростиВыполнения = Новый Структура("Прочитано, Скорость, ТекСкорость");
	
	ЗаполнитьЗначенияСвойств(ТекЗамерСкоростиВыполнения, ЗамерСкоростиВыполнения);

	Возврат ТекЗамерСкоростиВыполнения;
	
КонецФункции // ЗамерСкоростиВыполнения()

// Процедура - выполняет обработку данных
//
Процедура ОбработатьДанные() Экспорт
	
	ПрочитатьСкобкоФайл(ПутьКФайлу);
	
КонецПроцедуры // ОбработатьДанные()

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыВызоваМенеджераОбработкиДанных

// Процедура - выполняет действия обработки элемента данных
// и оповещает обработку-менеджер о продолжении обработки элемента
//
//	Параметры:
//		Элемент    - Произвольный     - Элемент данных для продолжения обработки
//
Процедура ПродолжениеОбработкиДанных(Элемент) Экспорт
	
	Если МенеджерОбработкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодДляВыполнения = "Попытка
		               |	МенеджерОбработкиДанных.ПродолжениеОбработкиДанных(Элемент, ПараметрыОбработки);
	                   |Исключение
	                   |КонецПопытки";
	                   
	Выполнить(КодДляВыполнения);
	
КонецПроцедуры // ПродолжениеОбработкиДанных()

// Процедура - выполняет действия при окончании обработки данных
// и оповещает обработку-менеджер о завершении обработки данных
//
Процедура ЗавершениеОбработкиДанных() Экспорт
	
	Если МенеджерОбработкиДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодДляВыполнения = "Попытка
		               |	МенеджерОбработкиДанных.ЗавершениеОбработкиДанных(ПараметрыОбработки);
	                   |Исключение
	                   |КонецПопытки";
	                   
	Выполнить(КодДляВыполнения);
	
КонецПроцедуры // ЗавершениеОбработкиДанных()

#КонецОбласти // СлужебныеПроцедурыВызоваМенеджераОбработкиДанных

#Область ПроцедурыИФункцииЧтенияДанныхСкобкофайла

// Процедура - выполняет чтение указанного файла скобочного формата 1С
//
//
// Параметры:
//  Данные    - Строка, Файл, Поток      - файл, хралище двоичных данных или поток данных для чтения
// 
Процедура ПрочитатьСкобкоФайл(Знач Данные = Неопределено)
	
	ПроверитьДопустимостьТипа(Данные,
	                          "Строка, Файл, Поток, ПотокВПамяти, ФайловыйПоток",
	                          "Некорректно указан источник данных, тип ""%1"", ожидается тип %2!");
	
	Если ТипЗнч(Данные) = Тип("Строка") И ВРег(Лев(Данные, 18)) = ВРег("e1cib/tempstorage/") Тогда
		Данные = ПолучитьИзВременногоХранилища(Данные).ОткрытьПотокДляЧтения();
	КонецЕсли;
	
	ПрочитанныеДанные = ИнициализироватьЭлементДанных(Неопределено);
	
	Текст = Новый ЧтениеТекста(Данные, КодировкаТекста.UTF8);
	
	ДанныеСтроки = Текст.ПрочитатьСтроку();
	
	ИнициализироватьЗамерСкоростиВыполнения();
	
	НомерСтроки = 1;
	
	Пока НЕ ДанныеСтроки = Неопределено Цикл
		
		Если НомерСтроки < НачальнаяСтрока И НЕ НачальнаяСтрока < 1 Тогда
			ДанныеСтроки = Текст.ПрочитатьСтроку();
			НомерСтроки = НомерСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		СтрокаДляОбработки = "";
		СтрокаДляОбработкиПрочитана = Ложь;
		КавычкиОткрыты = Ложь;
		
		// сборка "завершенной" строки, где кавычки закрыты и последний символ = "," или "}"
		НомераСтрок = Новый Соответствие();
		Пока НЕ (СтрокаДляОбработкиПрочитана ИЛИ ДанныеСтроки = Неопределено) Цикл
			Если ЗапоминатьНомераСтрок ИЛИ НомераСтрок.Количество() = 0 Тогда
				НомераСтрок.Вставить(НомерСтроки, НомерСтроки);
			КонецЕсли;
			СтрокаДляОбработкиПрочитана = ДополнитьСтрокуДляОбработки(СтрокаДляОбработки, ДанныеСтроки, КавычкиОткрыты);
			Если НЕ СтрокаДляОбработкиПрочитана Тогда
				Если КавычкиОткрыты Тогда
					СтрокаДляОбработки = СтрокаДляОбработки + Символы.ПС;
				КонецЕсли;
				ДанныеСтроки = Текст.ПрочитатьСтроку();
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
		
		СчетчикСимволов = 1;
		
		ПрочитатьДанныеСтроки(ПрочитанныеДанные, СтрокаДляОбработки, СчетчикСимволов, НомераСтрок);
		
		ОбновитьЗамерСкоростиВыполнения(НомерСтроки);
		
		ДанныеСтроки = Текст.ПрочитатьСтроку();
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ЗавершениеОбработкиДанных();
	
	ОбновитьЗамерСкоростиВыполнения(НомерСтроки, 1);
		
	НачальнаяСтрока = НомерСтроки;
	
	// переход к корневому элементу структуры чтения
	Пока НЕ ПрочитанныеДанные.Родитель = Неопределено Цикл
		ПрочитанныеДанные = ПрочитанныеДанные.Родитель;
	КонецЦикла;
	
КонецПроцедуры // ПрочитатьСкобкоФайл()
  
// Функция - добавляет строку к исходной и возвращает признак завершенности строки
// исходя из закрытия кавычек и окончания строки на "," или "}" 
//
// Параметры:
//  ДополняемаяСтрока    - Строка - исходная строка
//  Дополнение           - Строка - добавляемая строка
//  КавычкиОткрыты       - Булево - Истина - кавычки открыты; Ложь - кавычки закрыты
// 
// Возвращаемое значение:
//  Булево - Истина - строка завершена; Ложь - строка не завершена
//
Функция ДополнитьСтрокуДляОбработки(ДополняемаяСтрока, Дополнение, КавычкиОткрыты)
	
	КоличествоКавычек = СтрЧислоВхождений(Дополнение, """");
	
	ЧислоВхождений = 2;
	
	Если КавычкиОткрыты Тогда
		КавычкиОткрыты = (КоличествоКавычек % ЧислоВхождений = 0);
	Иначе
		КавычкиОткрыты = (КоличествоКавычек % ЧислоВхождений = 1);
	КонецЕсли;
	
	ДополняемаяСтрока = ДополняемаяСтрока + Дополнение;
	
	ПоследнийСимвол = Сред(Дополнение, СтрДлина(Дополнение), 1);
	
	// строка завершена если кавычки закрыты и последний символ = "," или "}"
	Возврат (НЕ КавычкиОткрыты) И (ПоследнийСимвол = "}" ИЛИ ПоследнийСимвол = ",");
	
КонецФункции // ДополнитьСтрокуДляОбработки()

// Функция - создает структуру нового элемента
//
// Параметры:
//  Родитель     - Структура              - ссылка на элемент-родитель (для корневого элемента "Неопределено")
//  НомераСтрок  - Соответствие(Число)    - массив номеров строк из которых был прочитан элемент
// 
// Возвращаемое значение:
//  Структура    - Новый элемент
//		*Родитель    - Структура            - ссылка на элемент-родитель
//		*Уровень     - Число                - уровень иерархии элемента
//		*Индекс      - Число                - индекс элемента в массиве значений родителя
//		*НомераСтрок - Соответствие(Число)  - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока   - Число                - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока   - Число                - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения    - Массив(Структура)    - массив дочерних элементов
//
Функция ИнициализироватьЭлементДанных(Знач Родитель, Знач НомераСтрок = Неопределено)
	
	Если НЕ ТипЗнч(НомераСтрок) = Тип("Соответствие") Тогда
		НомераСтрок = Новый Соответствие();
	КонецЕсли;
	
	Уровень = 0;
	Если ТипЗнч(Родитель) = Тип("Структура") Тогда
		Если Родитель.Свойство("Уровень") Тогда
			Уровень = Родитель.Уровень + 1;
		КонецЕсли;
	КонецЕсли;
	
	Индекс = 0;
	Если ТипЗнч(Родитель) = Тип("Структура") Тогда
		Если Родитель.Свойство("Значения") Тогда
			Индекс = Родитель.Значения.ВГраница() + 1;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("Родитель"   , Родитель);
	Результат.Вставить("Уровень"    , Уровень);
	Результат.Вставить("Индекс"     , Индекс);
	Результат.Вставить("НомераСтрок", НомераСтрок);
	Результат.Вставить("НачСтрока"  , 0);
	Результат.Вставить("КонСтрока"  , 0);
	Результат.Вставить("Значения"   , Новый Массив());
	
	ДополнитьНомераСтрокРодителей(Результат);
	
	Возврат Результат;
	
КонецФункции // ИнициализироватьЭлементДанных()

// Процедура - дополняет массивы номеров строк родительских элементов номерами строк указанного элемента
//
// Параметры:
//  Элемент          - Структура           - структура элемента
//		*Родитель    - Структура           - ссылка на элемент-родитель
//		*Уровень     - Число               - уровень иерархии элемента
//		*Индекс      - Число               - индекс элемента в массиве значений родителя
//		*НомераСтрок - Соответствие(Число) - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока   - Число               - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока   - Число               - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения    - Массив(Структура)   - массив дочерних элементов
//  НомераСтрок      - Соответствие(Число) - массив номеров строк для заполнения
// 
Процедура ДополнитьНомераСтрокРодителей(Знач Элемент, Знач НомераСтрок = Неопределено)
	
	Если НЕ ТипЗнч(НомераСтрок) = Тип("Соответствие") Тогда
		НомераСтрок = Новый Соответствие();
	КонецЕсли;
	
	
	Для Каждого ТекПара Из НомераСтрок Цикл
		Элемент.НачСтрока = ?(Элемент.НачСтрока = 0, ТекПара.Значение, Мин(Элемент.НачСтрока, ТекПара.Значение));
		Элемент.КонСтрока = Макс(Элемент.КонСтрока, ТекПара.Значение);
		
		Если ЗапоминатьНомераСтрок ИЛИ Элемент.НомераСтрок.Количество() = 0 Тогда
			Элемент.НомераСтрок.Вставить(ТекПара.Ключ, ТекПара.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ТекЭлемент = Элемент.Родитель;
	Пока НЕ ТекЭлемент = Неопределено Цикл
		Для Каждого ТекПара Из НомераСтрок Цикл
			ТекЭлемент.НачСтрока = ?(ТекЭлемент.НачСтрока = 0, ТекПара.Значение, Мин(ТекЭлемент.НачСтрока, ТекПара.Значение));
			ТекЭлемент.КонСтрока = Макс(ТекЭлемент.КонСтрока, ТекПара.Значение);
			Если ЗапоминатьНомераСтрок ИЛИ ТекЭлемент.НомераСтрок.Количество() = 0 Тогда
				ТекЭлемент.НомераСтрок.Вставить(ТекПара.Ключ, ТекПара.Значение);
			КонецЕсли;
		КонецЦикла;
		ТекЭлемент = ТекЭлемент.Родитель;
	КонецЦикла;
	
КонецПроцедуры // ДополнитьНомераСтрокРодителей()

// Процедура - Читает, разбирает данные из переданной строки и добавляет результат в иерархию массива структур
//
// Параметры:
//  ЭлементДляЗаполнения     - Структура                 - структура элемента
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока           - Число                     - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока           - Число                     - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
//  ДанныеСтроки             - Строка                    - строка для разбора
//  СчетчикСимволов          - Число                     - счетчик прочитанных символов переданной строки
//  НомераСтрок              - Соответствие(Число)       - массив номеров строк, на основе которых была сформирована структура текущего уровня
//
Процедура ПрочитатьДанныеСтроки(ЭлементДляЗаполнения,
                                ДанныеСтроки,
                                СчетчикСимволов,
                                НомераСтрок = Неопределено)
	
	Если НЕ ТипЗнч(НомераСтрок) = Тип("Соответствие") Тогда
		НомераСтрок = Новый Соответствие();
	КонецЕсли;
	
	ТекСтрока = "";
	КавычкиОткрыты = Ложь;
	ПредСимвол = "";
	
	ДлинаСтроки = СтрДлина(ДанныеСтроки);
	
	// посимвольное чтение строки
	Для й = СчетчикСимволов По ДлинаСтроки Цикл
		ТекСимвол = Сред(ДанныеСтроки, й, 1);
		
		Если КавычкиОткрыты Тогда // обработка строки внутри кавычек
			Если ТекСимвол = """" Тогда
				Если Сред(ДанныеСтроки, й, 2) = """""" Тогда  // это экранированные кавычки внутри строки
					ТекСтрока = ТекСтрока + Сред(ДанныеСтроки, й, 2);
					й = й + 1;
				Иначе // закрытие кавычек
					ТекСтрока = ТекСтрока + ТекСимвол;
					КавычкиОткрыты = Ложь;
				КонецЕсли;
			Иначе // любой символ добавляется к строке
				ТекСтрока = ТекСтрока + ТекСимвол;
			КонецЕсли;
		ИначеЕсли ТекСимвол = """" Тогда // открытие кавычек
			ТекСтрока = ТекСтрока + ТекСимвол;
			КавычкиОткрыты = Истина;
		ИначеЕсли ТекСимвол = "{" Тогда // открытие вложенного списка
			Если ЭлементДляЗаполнения = Неопределено Тогда
				ВремЭлементДляЗаполнения = ИнициализироватьЭлементДанных(Неопределено, НомераСтрок);
				ЭлементДляЗаполнения = ВремЭлементДляЗаполнения;
			Иначе
				ВремЭлементДляЗаполнения = ИнициализироватьЭлементДанных(ЭлементДляЗаполнения, НомераСтрок);
				ЭлементДляЗаполнения.Значения.Добавить(ВремЭлементДляЗаполнения);
			КонецЕсли;
			й = й + 1;
			ПрочитатьДанныеСтроки(ВремЭлементДляЗаполнения, ДанныеСтроки, й, НомераСтрок);
			Если й > СтрДлина(ДанныеСтроки) Тогда
				ЭлементДляЗаполнения = ВремЭлементДляЗаполнения; // если строка закончилась, то "наверх" поднимается элемент текущего уровня
				СчетчикСимволов = й;
				Возврат;
			КонецЕсли;
		ИначеЕсли ТекСимвол = "}" Тогда // закрытие вложенного списка
			Если НЕ (ПредСимвол = "{" ИЛИ ПредСимвол = "}" ИЛИ ПредСимвол = "") Тогда
				ЭлементДляЗаполнения.Значения.Добавить(ТекСтрока);
				ТекСтрока = "";
				ДополнитьНомераСтрокРодителей(ЭлементДляЗаполнения, НомераСтрок);
			КонецЕсли;
			
			// обработка добавленного элемента по правилам обработки
			ОбработатьЭлементДанных(ЭлементДляЗаполнения);
			
			ЭлементДляЗаполнения = ЭлементДляЗаполнения.Родитель;
			
			СчетчикСимволов = й + 1;

			ПрочитатьДанныеСтроки(ЭлементДляЗаполнения, ДанныеСтроки, СчетчикСимволов, НомераСтрок);
			
			Возврат;
		ИначеЕсли ТекСимвол = "," Тогда // добавление элемента текущего списка
			Если НЕ (ПредСимвол = "}" ИЛИ ПредСимвол = "") Тогда
				ЭлементДляЗаполнения.Значения.Добавить(ТекСтрока);
				ТекСтрока = "";
				ДополнитьНомераСтрокРодителей(ЭлементДляЗаполнения, НомераСтрок);
			КонецЕсли;
		Иначе
			ТекСтрока = ТекСтрока + ТекСимвол;
		КонецЕсли;
		
		ПредСимвол = ТекСимвол;
	КонецЦикла;
	
	СчетчикСимволов = й;
	
КонецПроцедуры // ПрочитатьДанныеСтроки()

// Процедура - выполняет обработку элемента данных
//
// Параметры:
//  Элемент                  - Структура                 - проверяемый элемент
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока           - Число                     - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока           - Число                     - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
//
Процедура ОбработатьЭлементДанных(Элемент)
	
	ПродолжитьОбработкуЭлемента = Истина;
	
	Если ТипЗнч(УровниЗаписей) = Тип("Массив") Тогда
		Если УровниЗаписей.Количество() > 0 Тогда
			Если УровниЗаписей.Найти(Элемент.Уровень) = Неопределено Тогда
				ПродолжитьОбработкуЭлемента = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПродолжитьОбработкуЭлемента Тогда
		ПродолжениеОбработкиДанных(Элемент);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьЭлементДанных()

#КонецОбласти // ПроцедурыИФункцииЧтенияДанныхСкобкофайла

#Область ПроцедурыИФункцииЗамераСкоростиВыполнения


// Процедура - инициализирует служебную структуру для замера скорости выполнения
// 
Процедура ИнициализироватьЗамерСкоростиВыполнения()
	
	ЗамерСкоростиВыполнения = Новый Структура();
	ЗамерСкоростиВыполнения.Вставить("Начало"     , ТекущаяУниверсальнаяДатаВМиллисекундах());
	ЗамерСкоростиВыполнения.Вставить("ТекНачало"  , ЗамерСкоростиВыполнения.Начало);
	ЗамерСкоростиВыполнения.Вставить("Прочитано"  , 0);
	ЗамерСкоростиВыполнения.Вставить("Скорость"   , 0);
	ЗамерСкоростиВыполнения.Вставить("ТекСкорость", 0);
	
КонецПроцедуры // ИнициализироватьЗамерСкоростиВыполнения()

// Процедура - обновляет данные замера скорости выполнения
// 
// Параметры:
//  НомерСтроки     - Число     - номер последней прочитанной строки
//  ЧастотаЗамера   - Число     - через указанное количество прочитанных строк
//                                будет выполняться замер скорости чтения
//
Процедура ОбновитьЗамерСкоростиВыполнения(Знач НомерСтроки, Знач ЧастотаЗамера = 0)
	
	Если ЧастотаЗамераСкоростиВыполнения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧастотаЗамера = ?(ЧастотаЗамера = 0, ЧастотаЗамераСкоростиВыполнения, ЧастотаЗамера);
	
	Если НомерСтроки % ЧастотаЗамера > 0 Тогда
		Возврат;
	КонецЕсли;

	Коэффициент = 1000;
	
	ТекНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ЗамерСкоростиВыполнения.ТекСкорость = (НомерСтроки - ЗамерСкоростиВыполнения.Прочитано)
	                                    / (ТекНачало - ЗамерСкоростиВыполнения.ТекНачало)
	                                    * Коэффициент;
	ЗамерСкоростиВыполнения.Скорость  = НомерСтроки / (ТекНачало - ЗамерСкоростиВыполнения.Начало) * Коэффициент;
	ЗамерСкоростиВыполнения.Прочитано = НомерСтроки;
	ЗамерСкоростиВыполнения.ТекНачало = ТекНачало;

КонецПроцедуры // ОбновитьЗамерСкоростиВыполнения()

#КонецОбласти // ПроцедурыИФункцииЗамераСкоростиЧтения

#Область СлужебныеПроцедурыИФункции

// Функция - проверяет тип значения на соответствие допустимым типам
//
// Параметры:
//  Значение             - Произвольный                 - проверяемое значение
//  ДопустимыеТипы       - Строка, Массив(Строка, Тип)  - список допустимых типов
//  ШаблонТекстаОшибки   - Строка                       - шаблон строки сообщения об ошибке
//                                                        ("Некорректный тип значения ""%1"" ожидается тип %2")
// 
// Возвращаемое значение:
//	Булево       - Истина - проверка прошла успешно
//
Функция ПроверитьДопустимостьТипа(Знач Значение, Знач ДопустимыеТипы, Знач ШаблонТекстаОшибки = "")
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗнч(ДопустимыеТипы) = Тип("Строка") Тогда
		МассивДопустимыхТипов = СтрРазделить(ДопустимыеТипы, ",");
	ИначеЕсли ТипЗнч(ДопустимыеТипы) = Тип("Массив") Тогда
		МассивДопустимыхТипов = ДопустимыеТипы;
	Иначе
		ВызватьИсключение СтрШаблон("Некорректно указан список допустимых типов, тип ""%1"" ожидается тип %2!",
		                            Тип(ДопустимыеТипы),
									"""Строка"" или ""Массив""");
	КонецЕсли;
	
	Типы = Новый Соответствие();
	
	СтрокаДопустимыхТипов = "";
	
	Для Каждого ТекТип Из МассивДопустимыхТипов Цикл
		ВремТип = ?(ТипЗнч(ТекТип) = Тип("Строка"), Тип(СокрЛП(ТекТип)), ТекТип);
		Типы.Вставить(ВремТип, СокрЛП(ТекТип));
		Если НЕ СтрокаДопустимыхТипов = "" Тогда
			СтрокаДопустимыхТипов = СтрокаДопустимыхТипов +
				?(МассивДопустимыхТипов.Найти(ТекТип) = МассивДопустимыхТипов.ВГраница(), " или ", ", ");
		КонецЕсли;
		СтрокаДопустимыхТипов = СтрокаДопустимыхТипов + """" + СокрЛП(ТекТип) + """";
	КонецЦикла;
	
	Если ШаблонТекстаОшибки = "" Тогда
		ШаблонТекстаОшибки = "Некорректный тип значения ""%1"" ожидается тип %2!";
	КонецЕсли;
	
	Если Типы[ТипЗначения] = Неопределено Тогда
		ВызватьИсключение СтрШаблон(ШаблонТекстаОшибки, СокрЛП(ТипЗначения), СтрокаДопустимыхТипов);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьДопустимостьТипа()

#КонецОбласти // СлужебныеПроцедурыИФункции

ЗапоминатьНомераСтрок = Ложь;
ЧастотаЗамераСкоростиВыполнения = 0;
