Перем ПараметрыОбработкиДанных;

#Область ПрограммныйИнтерфейс

// Функция - читает и возвращает параметры обработки данных из файла JSON, указанного в поле "ПутьКФайлу"
//
// Возвращаемое значение:
//  Структура                  - настройки обработки данных
//       *ПутьКОбработке       - Строка                 - путь к файлу внешней обработке
//       *ПроцедураОбработки   - Строка                 - имя процедуры обработки данных
//       *Параметры            - Строка                 - структура параметров процедуры обработки данных
//           *<Имя параметра>  - Произвольный           - знаечние параметра процедуры обработки данных
//       *АдресОбработки       - Строка                 - адрес внешней обработки во временном хранилище
//       *ИмяОбработки         - Строка                 - имя внешней обработки после подключения
//       *Обработчики          - Массив(Структура)      - массив обработчиков данных,
//                                                        полученных от обработки текущего уровня
//                                                        (состав полей элемента аналогичен текущему уровню) 
//
Функция ПараметрыОбработкиДанных() Экспорт
	
	Возврат ПараметрыОбработкиДанных;
	
КонецФункции // ПараметрыОбработкиДанных()

// Процедура - устанавливает параметры обработки данных
//
// Параметры:
//  НовыеПараметрыОбработкиДанных    - Структура, Строка      - новые параметры обработки данных
//                                     Файл, ДвоичныеДанные
//  Если тип параметра - Структура, то содержит следующие поля:
//       *ПутьКОбработке             - Строка                 - путь к файлу внешней обработке
//       *ПроцедураОбработки         - Строка                 - имя процедуры обработки данных
//       *Параметры                  - Строка                 - структура параметров процедуры обработки данных
//           *<Имя параметра>        - Произвольный           - знаечние параметра процедуры обработки данных
//       *АдресОбработки             - Строка                 - адрес внешней обработки во временном хранилище
//       *ИмяОбработки               - Строка                 - имя внешней обработки после подключения
//       *Обработчики                - Массив(Структура)      - массив обработчиков данных,
//                                                              полученных от обработки текущего уровня
//                                                              (состав полей элемента аналогичен текущему уровню) 
//
Процедура УстановитьПараметрыОбработкиДанных(Знач НовыеПараметрыОбработкиДанных) Экспорт
	
	ПроверитьДопустимостьТипа(НовыеПараметрыОбработкиДанных,
	                          "Строка, Файл, ДвоичныеДанные, Структура",
	                          СтрШаблон("Некорректно указаны параметры обработки данных ""%1"",",
	                                    СокрЛП(НовыеПараметрыОбработкиДанных)) +
							  ", тип ""%1"", ожидается тип %2!");
							  
	Если ТипЗнч(НовыеПараметрыОбработкиДанных) = Тип("Структура") Тогда
		ПараметрыОбработкиДанных = НовыеПараметрыОбработкиДанных;
	Иначе
		ПараметрыОбработкиДанных = ПрочитатьПараметрыОбработкиДанных(НовыеПараметрыОбработкиДанных);
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыОбработкиДанных()

// Функция - читает и возвращает параметры обработки данных из файла JSON, указанного в поле "ПутьКФайлу"
//
// Параметры:
//  ПараметрыОбработки         - Строка, Файл,          - параметры обработки данных в формате JSON,
//                               ДвоичныеДанные           путь к файлу, файл или двоичные данные
//                                                        параметров обработки данных в формате JSON
// Возвращаемое значение:
//  Структура                  - настройки обработки данных
//       *ПутьКОбработке       - Строка                 - путь к файлу внешней обработке
//       *ПроцедураОбработки   - Строка                 - имя процедуры обработки данных
//       *Параметры            - Строка                 - структура параметров процедуры обработки данных
//           *<Имя параметра>  - Произвольный           - знаечние параметра процедуры обработки данных
//       *ИмяОбработки         - Строка                 - имя внешней обработки после подключения
//       *Обработчики          - Массив(Структура)      - массив обработчиков данных,
//                                                        полученных от обработки текущего уровня
//                                                        (состав полей элемента аналогичен текущему уровню) 
//
Функция ПрочитатьПараметрыОбработкиДанных(Знач ПараметрыОбработки) Экспорт
	
	ПроверитьДопустимостьТипа(ПараметрыОбработки,
	                          "Строка, Файл, ДвоичныеДанные",
	                          СтрШаблон("Некорректно указаны настройки ""%1"",", СокрЛП(ПараметрыОбработки)) +
							  ", тип ""%1"", ожидается тип %2!");
							  
	ЧтениеПараметров = Новый ЧтениеJSON();
	
	Если ТипЗнч(ПараметрыОбработки) = Тип("Строка") Тогда
		Если Лев(СокрЛП(ПараметрыОбработки), 1) = "{" Тогда
			ЧтениеПараметров.УстановитьСтроку(ПараметрыОбработки);
		Иначе
			ЧтениеПараметров.ОткрытьФайл(ПараметрыОбработки);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрыОбработки) = Тип("ДвоичныеДанные") Тогда
		ЧтениеПараметров.ОткрытьПоток(ПараметрыОбработки.ОткрытьПотокДляЧтения());
	ИначеЕсли ТипЗнч(ПараметрыОбработки) = Тип("Файл") Тогда
		ЧтениеПараметров.ОткрытьФайл(ПараметрыОбработки);
	КонецЕсли;
	
	Возврат ПрочитатьJSON(ЧтениеПараметров, Ложь, , ФорматДатыJSON.ISO, "ОбработчикЧтенияПараметровИзJSON", ЭтотОбъект);
	
КонецФункции // ПрочитатьПараметрыОбработкиДанных()

// Процедура - выполняет обработку переданных данных с указанными параметрами
//
// Параметры:
//  Данные                           - Произвольный           - данные для обработки
//  ПараметрыОбработки               - Структура              - параметры обработки данных
//       *ПутьКОбработке             - Строка                 - путь к файлу внешней обработке
//       *ПроцедураОбработки         - Строка                 - имя процедуры обработки данных
//       *Параметры                  - Строка                 - структура параметров процедуры обработки данных
//           *<Имя параметра>        - Произвольный           - знаечние параметра процедуры обработки данных
//       *АдресОбработки             - Строка                 - адрес внешней обработки во временном хранилище
//       *ИмяОбработки               - Строка                 - имя внешней обработки после подключения
//       *Обработчики                - Массив(Структура)      - массив обработчиков данных,
//                                                              полученных от обработки текущего уровня
//                                                              (состав полей элемента аналогичен текущему уровню) 
//
Процедура ОбработатьДанные(Знач Данные = Неопределено, Знач ПараметрыОбработки = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
		ПараметрыОбработки = ПараметрыОбработкиДанных;
	КонецЕсли;
	
	//ПроверитьСвойства(ПараметрыОбработки, "ИмяОбработки", "Отсутствуют обязательные настройки: %1");
	
	СоздатьВнешнююОбработку(ПараметрыОбработки);

	ПараметрыОбработки.Обработка.УстановитьДанные(Данные);
		
	Если ПараметрыОбработки.Свойство("ПроцедураОбработки") Тогда
		Выполнить("ПараметрыОбработки.Обработка." + ПараметрыОбработки.ПроцедураОбработки + "()");
	Иначе
		ПараметрыОбработки.Обработка.ОбработатьДанные();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьДанные()

// Процедура - обратного вызова (callback) выполняет вызов обработчиков для переданных данных
//
// Параметры:
//  Данные                           - Строка                 - данные для обработки
//  ПараметрыОбработки               - Структура              - параметры обработки данных
//       *ПутьКОбработке             - Строка                 - путь к файлу внешней обработке
//       *ПроцедураОбработки         - Строка                 - имя процедуры обработки данных
//       *Параметры                  - Строка                 - структура параметров процедуры обработки данных
//           *<Имя параметра>        - Произвольный           - знаечние параметра процедуры обработки данных
//       *АдресОбработки             - Строка                 - адрес внешней обработки во временном хранилище
//       *ИмяОбработки               - Строка                 - имя внешней обработки после подключения
//       *Обработчики                - Массив(Структура)      - массив обработчиков данных,
//                                                              полученных от обработки текущего уровня
//                                                              (состав полей элемента аналогичен текущему уровню) 
//
Процедура ПродолжениеОбработкиДанных(Знач Данные, Знач ПараметрыОбработки) Экспорт
	
	Если НЕ ПараметрыОбработки.Свойство("Обработчики") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ПараметрыОбработки.Обработчики) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекОбработчик Из ПараметрыОбработки.Обработчики Цикл
		ОбработатьДанные(Данные, ТекОбработчик);
	КонецЦикла;
	
КонецПроцедуры // ПродолжениеОбработкиДанных()

// Процедура - обратного вызова (callback) выполняет вызов завершение обработки данных для всех обработчиков
//
// Параметры:
//  ПараметрыОбработки               - Структура              - параметры обработки данных
//       *ПутьКОбработке             - Строка                 - путь к файлу внешней обработке
//       *ПроцедураОбработки         - Строка                 - имя процедуры обработки данных
//       *Параметры                  - Строка                 - структура параметров процедуры обработки данных
//           *<Имя параметра>        - Произвольный           - знаечние параметра процедуры обработки данных
//       *АдресОбработки             - Строка                 - адрес внешней обработки во временном хранилище
//       *ИмяОбработки               - Строка                 - имя внешней обработки после подключения
//       *Обработчики                - Массив(Структура)      - массив обработчиков данных,
//                                                              полученных от обработки текущего уровня
//                                                              (состав полей элемента аналогичен текущему уровню) 
//
Процедура ЗавершениеОбработкиДанных(Знач ПараметрыОбработки) Экспорт
	
	Если НЕ ПараметрыОбработки.Свойство("Обработчики") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ПараметрыОбработки.Обработчики) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекОбработчик Из ПараметрыОбработки.Обработчики Цикл
		ТекОбработчик.Обработка.ЗавершениеОбработкиДанных();
	КонецЦикла;
	
КонецПроцедуры // ЗавершениеОбработкиДанных()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - создает внешнюю обработку в соответствии с указанными параметрами
//
// Параметры:
//  ПараметрыОбработки               - Структура              - параметры обработки данных
//       *ПутьКОбработке             - Строка                 - путь к файлу внешней обработке
//       *ПроцедураОбработки         - Строка                 - имя процедуры обработки данных
//       *Параметры                  - Строка                 - структура параметров процедуры обработки данных
//           *<Имя параметра>        - Произвольный           - знаечние параметра процедуры обработки данных
//       *АдресОбработки             - Строка                 - адрес внешней обработки во временном хранилище
//       *ИмяОбработки               - Строка                 - имя внешней обработки после подключения
//       *Обработка                  - ВнешняяОбработкаОбъект - объект внешней обработки
//                                                              (заполняется в результате выполнения процедуры)
//       *Обработчики                - Массив(Структура)      - массив обработчиков данных,
//                                                              полученных от обработки текущего уровня
//                                                              (состав полей элемента аналогичен текущему уровню) 
//
Процедура СоздатьВнешнююОбработку(ПараметрыОбработки)
	
	Если ПараметрыОбработки.Свойство("Обработка") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбработки = Неопределено;
	ПараметрыОбработки.Свойство("ИмяОбработки", ИмяОбработки);

	//ТипОбработки = Тип(СтрШаблон("ВнешняяОбработкаОбъект.%1", ИмяОбработки));
	//Если ТипЗнч(ПараметрыОбработки.Обработка) = ТипОбработки Тогда
	//	Возврат;
	//КонецЕсли;
	
	ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий();
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;

	Если ПараметрыОбработки.Свойство("АдресОбработки") Тогда
		ИмяОбработки = ВнешниеОбработки.Подключить(ПараметрыОбработки.АдресОбработки,
		                                           ИмяОбработки,
		                                           Ложь,
		                                           ОписаниеЗащиты);
		                                           
		ПараметрыОбработки.Вставить("Обработка", ВнешниеОбработки.Создать(ИмяОбработки));
	Иначе
		ПараметрыОбработки.Вставить("Обработка", ВнешниеОбработки.Создать(ПараметрыОбработки.ПутьКОбработке, Ложь));
	КонецЕсли;
	
	ПараметрыОбработки.Обработка.УстановитьМенеджерОбработкиДанных(ЭтотОбъект);
	
	УстановитьПараметрыОбработчика(ПараметрыОбработки);

КонецПроцедуры // СоздатьВнешнююОбработку()

// Процедура - устанавливает параметры обработки - обработчика данных
//
// Параметры:
//  ПараметрыОбработки               - Структура              - параметры обработки данных
//       *ПутьКОбработке             - Строка                 - путь к файлу внешней обработке
//       *ПроцедураОбработки         - Строка                 - имя процедуры обработки данных
//       *Параметры                  - Строка                 - структура параметров процедуры обработки данных
//           *<Имя параметра>        - Произвольный           - знаечние параметра процедуры обработки данных
//       *ИмяОбработки               - Строка                 - имя внешней обработки после подключения
//       *Обработчики                - Массив(Структура)      - массив обработчиков данных,
//                                                              полученных от обработки текущего уровня
//                                                              (состав полей элемента аналогичен текущему уровню) 
//
Процедура УстановитьПараметрыОбработчика(Знач ПараметрыОбработки)
	
	Если ПараметрыОбработки.Свойство("Параметры") Тогда
		Для Каждого ТекПараметр Из ПараметрыОбработки.Параметры Цикл
			Если НЕ ТипЗнч(ТекПараметр.Значение) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ (ТекПараметр.Значение.Свойство("ИмяОбработки") И ТекПараметр.Значение.Свойство("ФункцияПолученияЗначения")) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекПараметр.Значение = ВычислитьЗначениеПараметра(ТекПараметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОбработки.Обработка.УстановитьПараметрыОбработкиДанных(ПараметрыОбработки);
	
КонецПроцедуры // УстановитьПараметрыОбработчика()

// Функция - вычисляет и возвращает значение параметра обработки - обработчика данных
// в случае, когда значение параметра вычисляется в обработке
//
// Параметры:
//  СтруктураПараметра               - Структура              - описание механизма получения значения параметра
//       *ПутьКОбработке             - Строка                 - путь к файлу внешней обработке
//       *ИмяОбработки               - Строка                 - имя подключенной внешней обработке
//       *Обработка                  - ВнешняяОбработкаОбъект - объект внешней обработки
//                                                              (заполняется в результате выполнения процедуры)
//       *ФункцияПолученияЗначения   - Строка                 - имя функции получения значения параметра
//
// Возвращаемое значение:
//  Произвольный              - значение параметрах
//
Функция ВычислитьЗначениеПараметра(Знач СтруктураПараметра)
	
	Если НЕ СтруктураПараметра.Свойство("Обработка") Тогда
		СтруктураПараметра.Вставить("Обработка", ВнешниеОбработки.Создать(СтруктураПараметра.ИмяОбработки, Ложь));
	КонецЕсли;
	Если НЕ ТипЗнч(СтруктураПараметра.Обработка) = Тип(СтрШаблон("ВнешняяОбработкаОбъект.%1", СтруктураПараметра.ИмяОбработки)) Тогда
		СтруктураПараметра.Обработка = СтруктураПараметра.Создать(СтруктураПараметра.ИмяОбработки, Ложь);
	КонецЕсли;
	
	УстановитьПараметрыОбработчика(СтруктураПараметра);
	
	ЗначениеПараметра = Неопределено;
	
	Выполнить("ЗначениеПараметра = СтруктураПараметра.Обработка." + СтруктураПараметра.ФункцияПолученияЗначения + "()");
	
	Возврат ЗначениеПараметра;
	
КонецФункции // ВычислитьЗначениеПараметра()

// Функция - проверяет тип значения на соответствие допустимым типам
//
// Параметры:
//  Значение             - Произвольный                 - проверяемое значение
//  ДопустимыеТипы       - Строка, Массив(Строка, Тип)  - список допустимых типов
//  ШаблонТекстаОшибки   - Строка                       - шаблон строки сообщения об ошибке
//                                                        ("Некорректный тип значения ""%1"" ожидается тип %2")
// 
// Возвращаемое значение:
//	Булево       - Истина - проверка прошла успешно
//
Функция ПроверитьДопустимостьТипа(Знач Значение, Знач ДопустимыеТипы, Знач ШаблонТекстаОшибки = "")
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗнч(ДопустимыеТипы) = Тип("Строка") Тогда
		МассивДопустимыхТипов = СтрРазделить(ДопустимыеТипы, ",");
	ИначеЕсли ТипЗнч(ДопустимыеТипы) = Тип("Массив") Тогда
		МассивДопустимыхТипов = ДопустимыеТипы;
	Иначе
		ВызватьИсключение СтрШаблон("Некорректно указан список допустимых типов, тип ""%1"" ожидается тип %2!",
		                            Тип(ДопустимыеТипы),
									"""Строка"" или ""Массив""");
	КонецЕсли;
	
	Типы = Новый Соответствие();
	
	СтрокаДопустимыхТипов = "";
	
	Для Каждого ТекТип Из МассивДопустимыхТипов Цикл
		ВремТип = ?(ТипЗнч(ТекТип) = Тип("Строка"), Тип(СокрЛП(ТекТип)), ТекТип);
		Типы.Вставить(ВремТип, СокрЛП(ТекТип));
		СтрокаДопустимыхТипов = СтрокаДопустимыхТипов
		                      + ?(СтрокаДопустимыхТипов = "",
							      "",
							      ?(МассивДопустимыхТипов.Найти(ТекТип) = МассивДопустимыхТипов.ВГраница(),
								    " или ",
								    ", "))
		                      + """" + СокрЛП(ТекТип) + """";
	КонецЦикла;
	
	Если ШаблонТекстаОшибки = "" Тогда
		ШаблонТекстаОшибки = "Некорректный тип значения ""%1"" ожидается тип %2!";
	КонецЕсли;
	
	Если Типы[ТипЗначения] = Неопределено Тогда
		ВызватьИсключение СтрШаблон(ШаблонТекстаОшибки, СокрЛП(ТипЗначения), СтрокаДопустимыхТипов);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьДопустимостьТипа()

// Функция - Проверить свойства
//
// Параметры:
//  ПроверяемаяСтруктура     - Структура               - проверяемая структура
//  ОбязательныеСвойства     - Строка, Массив(Строка)  - список обязательных свойств
//  ШаблонТекстаОшибки       - Строка                  - шаблон строки сообщения об ошибке
//                                                       ("Отсутствуют обязательные свойства: %1")
// 
// Возвращаемое значение:
//	Булево       - Истина - проверка прошла успешно
//
//@skip-warning
Функция ПроверитьСвойства(Знач ПроверяемаяСтруктура, Знач ОбязательныеСвойства, Знач ШаблонТекстаОшибки = "")
	
	ПроверитьДопустимостьТипа(ОбязательныеСвойства,
	                          "Строка, Массив",
	                          "Некорректно указан список обязательных свойств, тип ""%1"", ожидается тип %2!");
							  
	Если ТипЗнч(ОбязательныеСвойства) = Тип("Строка") Тогда
		МассивСвойств = СтрРазделить(ОбязательныеСвойства, ",");
	ИначеЕсли ТипЗнч(ОбязательныеСвойства) = Тип("Массив") Тогда
		МассивСвойств = ОбязательныеСвойства;
	КонецЕсли;
	
	СтрокаСвойств = "";
	
	Для Каждого ТекСвойство Из МассивСвойств Цикл
		
		Если ПроверяемаяСтруктура.Свойство(СокрЛП(ТекСвойство)) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСвойств = СтрокаСвойств
		                      + ?(СтрокаСвойств = "", Символы.ПС, ", " + Символы.ПС)
		                      + """" + СокрЛП(ТекСвойство) + """";
	КонецЦикла;
						  
	Если ШаблонТекстаОшибки = "" Тогда
		ШаблонТекстаОшибки = "Отсутствуют обязательные свойства: %1";
	КонецЕсли;
	
	Если НЕ СтрокаСвойств = "" Тогда
		ВызватьИсключение СтрШаблон(ШаблонТекстаОшибки, СтрокаСвойств);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьСвойства()

// Функция - обработчик чтения значений из JSON
//
// Параметры:
//  Свойство                  - Строка         - имя прочитанного свойства
//  Значение                  - Произвольный   - прочитанное значение / результат обработки
//  ДополнительныеПараметры   - Произвольный   - дополнительные параметры обработки
// 
// Возвращаемое значение:
//	Произвольный       - результат обработки
//
Функция ОбработчикЧтенияПараметровИзJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Значение = СтрЗаменить(Значение, "$thisRoot\", КаталогТекущейОбработки());
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // ОбработчикЧтенияПараметровИзJSON()

// Функция - возвращает путь к каталогу текущей обработки
// 
// Возвращаемое значение:
//	Строка       - путь к каталогу текущей обработки
//
Функция КаталогТекущейОбработки() Экспорт
	
	ФайлЭтойОбработки = Новый Файл(ЭтотОбъект.ИспользуемоеИмяФайла);
	
	Возврат ФайлЭтойОбработки.Путь;
	
КонецФункции // КаталогТекущейОбработки()

#КонецОбласти
