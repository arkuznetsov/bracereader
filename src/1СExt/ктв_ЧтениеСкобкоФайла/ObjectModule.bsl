Перем ЗапоминатьНомераСтрок; // Истина - при чтении файла, будут запоминаться номера строк для каждого элемента
Перем ПравилаОбработки; // Соответствие уровней иерархии прочитанных элементов и правил обработки

#Область ИнтерфейсныеПроцедурыИФункции

// Процедура - Прочитать скобко файл
//
// Параметры:
//  ПутьКФайлу                 - Строка       -  путь к файлу для чтения
//  НачальнаяСтрока            - Число        -  номер начальной строки файла для чтения
//  ОбрабатыватьРезультат      - Булево       -  Истина - результат чтения будет обработан;
//                                               Ложь - будет возвращен "сырой" результат
//
Функция ПрочитатьСкобкоФайл(ПутьКФайлу, НачальнаяСтрока = 1, ОбрабатыватьРезультат = Истина) Экспорт
	
	СтруктураЧтения = ИнициализироватьЭлемент(Неопределено);
	
	Текст = Новый ЧтениеТекста(ПутьКФайлу);
	
	ДанныеСтроки = Текст.ПрочитатьСтроку();
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекНачало = Начало;
	НачКоличество = 0;
	
	Скорость = 0;
	ТекСкорость = 0;
	
	НомерСтроки = 1;
	
	Пока НЕ ДанныеСтроки = Неопределено Цикл
		
		Если НомерСтроки < НачальнаяСтрока И НЕ НачальнаяСтрока < 1 Тогда
			ДанныеСтроки = Текст.ПрочитатьСтроку();
			НомерСтроки = НомерСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		СтрокаДляОбработки = "";
		СтрокаДляОбработкиПрочитана = Ложь;
		КавычкиОткрыты = Ложь;
		
		// сборка "завершенной" строки, где кавычки закрыты и последний символ = "," или "}"
		НомераСтрок = Новый Соответствие();
		Пока НЕ (СтрокаДляОбработкиПрочитана ИЛИ ДанныеСтроки = Неопределено) Цикл
			Если ЗапоминатьНомераСтрок() ИЛИ НомераСтрок.Количество() = 0 Тогда
				НомераСтрок.Вставить(НомерСтроки, НомерСтроки);
			КонецЕсли;
			СтрокаДляОбработкиПрочитана = ДополнитьСтрокуДляОбработки(СтрокаДляОбработки, ДанныеСтроки, КавычкиОткрыты);
			Если НЕ СтрокаДляОбработкиПрочитана Тогда
				Если КавычкиОткрыты Тогда
					СтрокаДляОбработки = СтрокаДляОбработки + Символы.ПС;
				КонецЕсли;
				ДанныеСтроки = Текст.ПрочитатьСтроку();
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
		
		СчетчикСимволов = 1;
		
		ПрочитатьДанныеСтроки(СтруктураЧтения, СтрокаДляОбработки, СчетчикСимволов, НомераСтрок, ПравилаОбработки);
		
		Если НомерСтроки % 1000 = 0 Тогда
			ТекСкорость = (НомерСтроки - НачКоличество) / (ТекущаяУниверсальнаяДатаВМиллисекундах() - ТекНачало) * 1000;
			Скорость = НомерСтроки / (ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало) * 1000;
			НачКоличество = НомерСтроки;
			ТекНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		КонецЕсли;
		
		ДанныеСтроки = Текст.ПрочитатьСтроку();
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаДляОбработки) Тогда
		ПрочитатьДанныеСтроки(СтруктураЧтения, СтрокаДляОбработки, СчетчикСимволов, НомераСтрок, ПравилаОбработки);
	КонецЕсли;
	
	НачальнаяСтрока = НомерСтроки;
	
	// переход к корневому элементу структуры чтения
	Пока НЕ СтруктураЧтения.Родитель = Неопределено Цикл
		СтруктураЧтения = СтруктураЧтения.Родитель;
	КонецЦикла;
	
	Результат = СтруктураЧтения;
	
	Если ОбрабатыватьРезультат Тогда
		Результат = Новый Массив();
		Для Каждого ТекЭлемент Из ПравилаОбработки Цикл
			Для Каждого ТекПравило Из ТекЭлемент.Значение Цикл
				Результат.Добавить(ТекПравило.Обработка.ПолучитьРезультат(Истина));
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции // ПрочитатьСкобкоФайл()
  
// Процедура - Добавить правило обработки
//
// Параметры:
//  Уровень                       - Число               - уровень элемента для обработки правилом
//  Обработка                     - Модуль              - модуль, содержащий процедуры и функции обработки
//
Процедура ДобавитьПравилоОбработки(Уровень, Обработка) Экспорт
	
	Если НЕ ТипЗнч(ПравилаОбработки) = Тип("Соответствие") Тогда
		ПравилаОбработки = Новый Соответствие();
	КонецЕсли;

	Если ПравилаОбработки.Получить(Уровень) = Неопределено Тогда
		ПравилаОбработки.Вставить(Уровень, Новый Массив());
	КонецЕсли;
	
	ПравилаОбработки[Уровень].Добавить(Новый Структура("Обработка",
                                                       Обработка));
	
КонецПроцедуры // ДобавитьПравилоОбработки()

// Функция - Возвращает значение флага "ЗапоминатьНомераСтрок"
// 
// Возвращаемое значение:
//	Булево - Истина - при чтении файла будут сохранены все номера строк;
//           Ложь - будут сохранены только номера первых и последних строк
//
Функция ЗапоминатьНомераСтрок() Экспорт
	
	Если НЕ ТипЗнч(ЗапоминатьНомераСтрок) = Тип("Булево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЗапоминатьНомераСтрок;
	
КонецФункции // ЗапоминатьНомераСтрок()

// Процедура - Устанавливает значение флага "ЗапоминатьНомераСтрок"
//
// Параметры:
//	Запоминать      - Булево     - Истина - при чтении файла будут сохранены все номера строк;
//                                 Ложь - будут сохранены только номера первых и последних строк
//
Процедура УстановитьЗапоминатьНомераСтрок(Знач Запоминать) Экспорт
	
	ЗапоминатьНомераСтрок = Запоминать;
	
КонецПроцедуры // УстановитьЗапоминатьНомераСтрок()

#КонецОбласти

#Область ИнтерфейсныеПроцедурыИФункцииОбработкиПрочитанныхСтрок

// Функция - добавляет строку к исходной и возвращает признак завершенности строки
// исходя из закрытия кавычек и окончания строки на "," или "}" 
//
// Параметры:
//  ДополняемаяСтрока    - Строка - исходная строка
//  Дополнение           - Строка - добавляемая строка
//  КавычкиОткрыты       - Булево - Истина - кавычки открыты; Ложь - кавычки закрыты
// 
// Возвращаемое значение:
//  Булево - Истина - строка завершена; Ложь - строка не завершена
//
Функция ДополнитьСтрокуДляОбработки(ДополняемаяСтрока, Дополнение, КавычкиОткрыты)
	
	КоличествоКавычек = СтрЧислоВхождений(Дополнение, """");
	
	Если КавычкиОткрыты Тогда
		КавычкиОткрыты = (КоличествоКавычек % 2 = 0);
	Иначе
		КавычкиОткрыты = (КоличествоКавычек % 2 = 1);
	КонецЕсли;
	
	ДополняемаяСтрока = ДополняемаяСтрока + Дополнение;
	
	ПоследнийСимвол = Сред(Дополнение, СтрДлина(Дополнение), 1);
	
	// строка завершена если кавычки закрыты и последний символ = "," или "}"
	Возврат (НЕ КавычкиОткрыты) И (ПоследнийСимвол = "}" ИЛИ ПоследнийСимвол = ",");
	
КонецФункции // ДополнитьСтрокуДляОбработки()

// Функция - создает структуру нового элемента
//
// Параметры:
//  Родитель     - Структура              - ссылка на элемент-родитель (для корневого элемента "Неопределено")
//  НомераСтрок  - Соответствие(Число)    - массив номеров строк из которых был прочитан элемент
// 
// Возвращаемое значение:
//  Структура    - Новый элемент
//		*Родитель    - Структура            - ссылка на элемент-родитель
//		*Уровень     - Число                - уровень иерархии элемента
//		*Индекс      - Число                - индекс элемента в массиве значений родителя
//		*НомераСтрок - Соответствие(Число)  - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока   - Число                - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока   - Число                - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения    - Массив(Структура)    - массив дочерних элементов
//
Функция ИнициализироватьЭлемент(Знач Родитель, Знач НомераСтрок = Неопределено)
	
	Если НЕ ТипЗнч(НомераСтрок) = Тип("Соответствие") Тогда
		НомераСтрок = Новый Соответствие();
	КонецЕсли;
	
	Уровень = 0;
	Если ТипЗнч(Родитель) = Тип("Структура") Тогда
		Если Родитель.Свойство("Уровень") Тогда
			Уровень = Родитель.Уровень + 1;
		КонецЕсли;
	КонецЕсли;
	
	Индекс = 0;
	Если ТипЗнч(Родитель) = Тип("Структура") Тогда
		Если Родитель.Свойство("Значения") Тогда
			Индекс = Родитель.Значения.ВГраница() + 1;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура("Родитель,
	                            |Уровень,
	                            |Индекс,
	                            |НомераСтрок,
	                            |НачСтрока,
	                            |КонСтрока,
	                            |Значения",
	                            Родитель,
	                            Уровень,
	                            Индекс,
	                            НомераСтрок,
								0,
								0,
	                            Новый Массив());
	
	ДополнитьНомераСтрокРодителей(Результат);
	
	Возврат Результат;
	
КонецФункции // ИнициализироватьЭлемент()

// Процедура - дополняет массивы номеров строк родительских элементов номерами строк указанного элемента
//
// Параметры:
//  Элемент          - Структура           - структура элемента
//		*Родитель    - Структура           - ссылка на элемент-родитель
//		*Уровень     - Число               - уровень иерархии элемента
//		*Индекс      - Число               - индекс элемента в массиве значений родителя
//		*НомераСтрок - Соответствие(Число) - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока   - Число               - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока   - Число               - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения    - Массив(Структура)   - массив дочерних элементов
//  НомераСтрок      - Соответствие(Число) - массив номеров строк для заполнения
// 
Процедура ДополнитьНомераСтрокРодителей(Знач Элемент, Знач НомераСтрок = Неопределено)
	
	Если НЕ ТипЗнч(НомераСтрок) = Тип("Соответствие") Тогда
		НомераСтрок = Новый Соответствие();
	КонецЕсли;
	
	
	Для Каждого ТекПара Из НомераСтрок Цикл
		Элемент.НачСтрока = ?(Элемент.НачСтрока = 0, ТекПара.Значение, Мин(Элемент.НачСтрока, ТекПара.Значение));
		Элемент.КонСтрока = Макс(Элемент.КонСтрока, ТекПара.Значение);
		
		Если ЗапоминатьНомераСтрок() ИЛИ Элемент.НомераСтрок.Количество() = 0 Тогда
			Элемент.НомераСтрок.Вставить(ТекПара.Ключ, ТекПара.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ТекЭлемент = Элемент.Родитель;
	Пока НЕ ТекЭлемент = Неопределено Цикл
		Для Каждого ТекПара Из НомераСтрок Цикл
			ТекЭлемент.НачСтрока = ?(ТекЭлемент.НачСтрока = 0, ТекПара.Значение, Мин(ТекЭлемент.НачСтрока, ТекПара.Значение));
			ТекЭлемент.КонСтрока = Макс(ТекЭлемент.КонСтрока, ТекПара.Значение);
			Если ЗапоминатьНомераСтрок() ИЛИ ТекЭлемент.НомераСтрок.Количество() = 0 Тогда
				ТекЭлемент.НомераСтрок.Вставить(ТекПара.Ключ, ТекПара.Значение);
			КонецЕсли;
		КонецЦикла;
		ТекЭлемент = ТекЭлемент.Родитель;
	КонецЦикла;
	
КонецПроцедуры // ДополнитьНомераСтрокРодителей()

// Процедура - Читает, разбирает данные из переданной строки и добавляет результат в иерархию массива структур
//
// Параметры:
//  ЭлементДляЗаполнения     - Структура                 - структура элемента
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока           - Число                     - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока           - Число                     - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
//  ДанныеСтроки             - Строка                    - строка для разбора
//  СчетчикСимволов          - Число                     - счетчик прочитанных символов переданной строки
//  НомераСтрок              - Соответствие(Число)       - массив номеров строк, на основе которых была сформирована структура текущего уровня
//  ПравилаОбработки         - Соответствие(Структура)   - правила обработки элементов для каждого уровня
//
Процедура ПрочитатьДанныеСтроки(ЭлементДляЗаполнения,
                                ДанныеСтроки,
                                СчетчикСимволов,
                                НомераСтрок = Неопределено,
                                ПравилаОбработки = Неопределено)
	
	Если НЕ ТипЗнч(НомераСтрок) = Тип("Соответствие") Тогда
		НомераСтрок = Новый Соответствие();
	КонецЕсли;
	
	ТекСтрока = "";
	КавычкиОткрыты = Ложь;
	ПредСимвол = "";
	
	ДлинаСтроки = СтрДлина(ДанныеСтроки);
	
	// посимвольное чтение строки
	Для й = СчетчикСимволов По ДлинаСтроки Цикл
		ТекСимвол = Сред(ДанныеСтроки, й, 1);
		
		Если КавычкиОткрыты Тогда // обработка строки внутри кавычек
			Если ТекСимвол = """" Тогда
				Если Сред(ДанныеСтроки, й, 2) = """""" Тогда  // это экранированные кавычки внутри строки
					ТекСтрока = ТекСтрока + Сред(ДанныеСтроки, й, 2);
					й = й + 1;
				Иначе // закрытие кавычек
					ТекСтрока = ТекСтрока + ТекСимвол;
					КавычкиОткрыты = Ложь;
				КонецЕсли;
			Иначе // любой символ добавляется к строке
				ТекСтрока = ТекСтрока + ТекСимвол;
			КонецЕсли;
		ИначеЕсли ТекСимвол = """" Тогда // открытие кавычек
			ТекСтрока = ТекСтрока + ТекСимвол;
			КавычкиОткрыты = Истина;
		ИначеЕсли ТекСимвол = "{" Тогда // открытие вложенного списка
			Если ЭлементДляЗаполнения = Неопределено Тогда
				ВремЭлементДляЗаполнения = ИнициализироватьЭлемент(Неопределено, НомераСтрок);
				ЭлементДляЗаполнения = ВремЭлементДляЗаполнения;
			Иначе
				ВремЭлементДляЗаполнения = ИнициализироватьЭлемент(ЭлементДляЗаполнения, НомераСтрок);
				ЭлементДляЗаполнения.Значения.Добавить(ВремЭлементДляЗаполнения);
			КонецЕсли;
			й = й + 1;
			ПрочитатьДанныеСтроки(ВремЭлементДляЗаполнения, ДанныеСтроки, й, НомераСтрок, ПравилаОбработки);
			Если й > СтрДлина(ДанныеСтроки) Тогда
				ЭлементДляЗаполнения = ВремЭлементДляЗаполнения; // если строка закончилась, то "наверх" поднимается элемент текущего уровня
				Возврат;
			КонецЕсли;
		ИначеЕсли ТекСимвол = "}" Тогда // закрытие вложенного списка
			Если НЕ (ПредСимвол = "{" ИЛИ ПредСимвол = "}" ИЛИ ПредСимвол = "") Тогда
				ЭлементДляЗаполнения.Значения.Добавить(ТекСтрока);
				ТекСтрока = "";
				ДополнитьНомераСтрокРодителей(ЭлементДляЗаполнения, НомераСтрок);
			КонецЕсли;
			
			// обработка добавленного элемента по правилам обработки
			ОбработатьЭлементПоПравилам(ЭлементДляЗаполнения);
			
			// проверка необходимости удаления обработанного элемента
			НужноУдалитьЭлемент = НужноУдалитьЭлемент(ЭлементДляЗаполнения);
			
			ЭлементДляЗаполнения = ЭлементДляЗаполнения.Родитель;
			
			Если НужноУдалитьЭлемент Тогда
				ЭлементДляЗаполнения.Значения.Удалить(ЭлементДляЗаполнения.Значения.ВГраница());
			КонецЕсли;
			
			СчетчикСимволов = й + 1;
			Возврат;
		ИначеЕсли ТекСимвол = "," Тогда // добавление элемента текущего списка
			Если НЕ (ПредСимвол = "}" ИЛИ ПредСимвол = "") Тогда
				ЭлементДляЗаполнения.Значения.Добавить(ТекСтрока);
				ТекСтрока = "";
				ДополнитьНомераСтрокРодителей(ЭлементДляЗаполнения, НомераСтрок);
			КонецЕсли;
		Иначе
			ТекСтрока = ТекСтрока + ТекСимвол;
		КонецЕсли;
		
		ПредСимвол = ТекСимвол;
	КонецЦикла;
	
	СчетчикСимволов = й;
	
КонецПроцедуры // ПрочитатьДанныеСтроки()

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииОбработкиЭлементов

// Процедура - выполняет обработку элемента по правилам
//
// Параметры:
//  Элемент                  - Структура                 - проверяемый элемент
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока           - Число                     - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока           - Число                     - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
//
Процедура ОбработатьЭлементПоПравилам(Элемент)
	
	Правила = ПравилаОбработки[Элемент.Уровень];
	
	Если Правила = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекПравило Из Правила Цикл
		ТекПравило.Обработка.ДобавитьЗапись(Элемент);
	КонецЦикла;
	
КонецПроцедуры // ОбработатьЭлементПоПравилам()

// Функция - Проверяет необходимость удаления элемента после обработки
//
// Параметры:
//  Элемент                  - Структура                 - проверяемый элемент
//		*Родитель            - Структура                 - ссылка на элемент-родитель
//		*Уровень             - Число                     - уровень иерархии элемента
//		*Индекс              - Число                     - индекс элемента в массиве значений родителя
//		*НомераСтрок         - Соответсвие(Число)        - массив номеров строк из которых был прочитан элемент и его дочерние элементы
//		*НачСтрока           - Число                     - номер первой строки из которой был прочитан элемент и его дочерние элементы
//		*КонСтрока           - Число                     - номер последней строки из которой был прочитан элемент и его дочерние элементы
//		*Значения            - Массив(Структура)         - массив дочерних элементов
// 
// Возвращаемое значение:
//   Булево - Истина - элемент нужно удалить после обработки
//
Функция НужноУдалитьЭлемент(Элемент)
	
	Правила = ПравилаОбработки[Элемент.Уровень];
	
	Если Правила = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НужноУдалить = Истина;
	Для Каждого ТекПравило Из Правила Цикл
		НужноУдалить = ТекПравило.Обработка.НужноУдалитьЭлемент(Элемент);
		Если НужноУдалить = Ложь Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Возврат НужноУдалить;
	
КонецФункции // НужноУдалитьЭлемент()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - удаляет начальные, конечные и экранированные кавычки из строки
//
// Параметры:
//  ПарамСтрока	 - Строка - строка для обработки
// 
// Возвращаемое значение:
//   Строка - результирующая строка
//
Функция ОбработатьКавычкиВСтроке(Знач ПарамСтрока)
	
	ПарамСтрока = СтрЗаменить(ПарамСтрока, """""", """");
	
	Если Лев(ПарамСтрока, 1) = """" Тогда
		ПарамСтрока = Сред(ПарамСтрока, 2);
	КонецЕсли;
	
	Если Прав(ПарамСтрока, 1) = """" Тогда
		ПарамСтрока = Сред(ПарамСтрока, 1, СтрДлина(ПарамСтрока) - 1);
	КонецЕсли;
	
	Возврат СокрЛП(ПарамСтрока);
	
КонецФункции // ОбработатьКавычкиВСтроке()

#КонецОбласти

ЗапоминатьНомераСтрок = Ложь;
